{
	"info": {
		"_postman_id": "8ffb9e49-dc3f-420f-99f0-8e5bacb3f2cc",
		"name": "OpenFDA API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34236472"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Get API key info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"Response is JSON\", () => pm.response.to.be.json);\r",
									"\r",
									"apiInfo = pm.response.json();\r",
									"pm.test(\"Response contains meta\", () => pm.expect(apiInfo).to.have.property('meta'));\r",
									"pm.test(\"Rate limit info exists\", () => {\r",
									"  pm.expect(apiInfo.meta).to.have.property('results');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/drug/event.json?api_key={{api_key}}&limit=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"drug",
								"event.json"
							],
							"query": [
								{
									"key": "api_key",
									"value": "{{api_key}}"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get API usage headers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"Rate-limit headers exist (optional)\", () => {\r",
									"    pm.expect(pm.response.headers.has('x-ratelimit-limit')).to.be.oneOf([true, false]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/drug/event.json?api_key={{api_key}}&limit=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"drug",
								"event.json"
							],
							"query": [
								{
									"key": "api_key",
									"value": "{{api_key}}"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ping API without key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response valid without key\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 403]);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 403) {\r",
									"  console.log(\"API key required for this operation or rate limit exceeded.\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/drug/event.json?limit=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"drug",
								"event.json"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Check authentication/limits via docs."
		},
		{
			"name": "Smoke",
			"item": [
				{
					"name": "Check Drug Event Endpoint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"api_key\")) {\r",
									"    console.warn(\"⚠️ API key not set in environment!\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"Response is JSON\", () => pm.response.to.be.json);\r",
									"\r",
									"data = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has meta and results\", () => {\r",
									"  pm.expect(data).to.have.property(\"meta\");\r",
									"  pm.expect(data).to.have.property(\"results\");\r",
									"});\r",
									"\r",
									"pm.test(\"Results array not empty\", () => {\r",
									"  pm.expect(data.results.length).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/drug/event.json?api_key={{api_key}}&limit=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"drug",
								"event.json"
							],
							"query": [
								{
									"key": "api_key",
									"value": "{{api_key}}"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Device Event Endpoint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"api_key\")) {\r",
									"    console.warn(\"⚠️ API key not set in environment!\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"Response is JSON\", () => pm.response.to.be.json);\r",
									"\r",
									"data = pm.response.json();\r",
									"\r",
									"pm.test(\"Response contains meta and results\", () => {\r",
									"  pm.expect(data).to.have.property(\"meta\");\r",
									"  pm.expect(data).to.have.property(\"results\");\r",
									"});\r",
									"\r",
									"pm.test(\"Results array contains objects\", () => {\r",
									"  pm.expect(data.results[0]).to.be.an(\"object\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/device/event.json?api_key={{api_key}}&limit=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"device",
								"event.json"
							],
							"query": [
								{
									"key": "api_key",
									"value": "{{api_key}}"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Check that the underlying endpoints respond with 200 and return JSON."
		},
		{
			"name": "Functional",
			"item": [
				{
					"name": "Search by field",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"api_key\")) {\r",
									"    console.warn(\"⚠️ API key not set in environment!\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"Response is JSON\", () => pm.response.to.be.json);\r",
									"\r",
									"data = pm.response.json();\r",
									"\r",
									"// Checking the structure is standart\r",
									"pm.test(\"Response contains meta and results\", () => {\r",
									"  pm.expect(data).to.have.property(\"meta\");\r",
									"  pm.expect(data).to.have.property(\"results\");\r",
									"});\r",
									"\r",
									"// Checking that results really contains 'headache'\r",
									"pm.test(\"At least one reaction contains 'headache'\", () => {\r",
									"  const reactions = data.results.flatMap(r => \r",
									"    (r.patient?.reaction || []).map(obj => obj.reactionmeddrapt.toLowerCase())\r",
									"  );\r",
									"  pm.expect(reactions.some(r => r.includes(\"headache\"))).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/drug/event.json?api_key={{api_key}}&search=patient.reaction.reactionmeddrapt:\"headache\"&limit=3",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"drug",
								"event.json"
							],
							"query": [
								{
									"key": "api_key",
									"value": "{{api_key}}"
								},
								{
									"key": "search",
									"value": "patient.reaction.reactionmeddrapt:\"headache\""
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pagination test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save the first page safely\r",
									"let firstPageData;\r",
									"try {\r",
									"    firstPageData = pm.response.json();\r",
									"} catch (e) {\r",
									"    pm.test(\"Response is valid JSON\", () => pm.expect.fail(\"Invalid JSON in first page response\"));\r",
									"    return;\r",
									"}\r",
									"\r",
									"if (!firstPageData.results || !Array.isArray(firstPageData.results)) {\r",
									"    pm.test(\"First page has results\", () => pm.expect.fail(\"No 'results' field in first page response\"));\r",
									"    return;\r",
									"}\r",
									"\r",
									"let firstPageIds = firstPageData.results.map(r => r.safetyreportid).filter(Boolean);\r",
									"pm.environment.set(\"first_page_ids\", firstPageIds.join(\",\"));\r",
									"\r",
									"// Prepare second request\r",
									"const baseUrl = pm.environment.get(\"base_url\");\r",
									"const apiKey = pm.environment.get(\"api_key\");\r",
									"const url2 = `${baseUrl}/drug/event.json?api_key=${apiKey}&search=patient.reaction.reactionmeddrapt:\"headache\"&limit=2&skip=2`;\r",
									"\r",
									"// Send second page request\r",
									"pm.sendRequest(url2, function (err, res) {\r",
									"    pm.test(\"Second request completed without network error\", () => pm.expect(err).to.be.null);\r",
									"\r",
									"    if (!res) return;\r",
									"    pm.test(\"Second page status 200\", () => pm.expect(res).to.have.property(\"code\", 200));\r",
									"\r",
									"    let secondPageData;\r",
									"    try {\r",
									"        secondPageData = res.json();\r",
									"    } catch (e) {\r",
									"        pm.test(\"Second page is valid JSON\", () => pm.expect.fail(\"Invalid JSON in second page response\"));\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    if (!secondPageData.results || !Array.isArray(secondPageData.results)) {\r",
									"        pm.test(\"Second page has results\", () => pm.expect.fail(\"No 'results' field in second page response\"));\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    // Check data don't overlap\r",
									"    const secondPageIds = secondPageData.results.map(r => r.safetyreportid).filter(Boolean);\r",
									"    const intersection = firstPageIds.filter(id => secondPageIds.includes(id));\r",
									"\r",
									"    pm.test(\"Pages do not overlap\", () => pm.expect(intersection.length).to.equal(0));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/drug/event.json?api_key={{api_key}}&search=patient.reaction.reactionmeddrapt:\"headache\"&limit=2&skip={{skip}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"drug",
								"event.json"
							],
							"query": [
								{
									"key": "api_key",
									"value": "{{api_key}}"
								},
								{
									"key": "search",
									"value": "patient.reaction.reactionmeddrapt:\"headache\""
								},
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "skip",
									"value": "{{skip}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Count aggregation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"api_key\")) {\r",
									"    console.warn(\"⚠️ API key not set in environment!\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"Response is JSON\", () => pm.response.to.be.json);\r",
									"\r",
									"data = pm.response.json();\r",
									"\r",
									"// Checking that the result is an array with counts\r",
									"pm.test(\"Results array exists\", () => pm.expect(data.results).to.be.an(\"array\"));\r",
									"pm.test(\"Results have count and term\", () => {\r",
									"    data.results.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"term\");\r",
									"        pm.expect(item).to.have.property(\"count\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/drug/event.json?api_key={{api_key}}&count=serious\n",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"drug",
								"event.json"
							],
							"query": [
								{
									"key": "api_key",
									"value": "{{api_key}}"
								},
								{
									"key": "count",
									"value": "serious\n"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Does the API do what it promises"
		},
		{
			"name": "Negative",
			"item": [
				{
					"name": "Invalid param (limit > 100)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 or 422 (if API validates limit), else 200 allowed\", () => {\r",
									"    pm.expect([200, 400, 422]).to.include(pm.response.code);\r",
									"});\r",
									"\r",
									"let jsonResponse;\r",
									"try {\r",
									"    jsonResponse = pm.response.json();\r",
									"} catch (e) {\r",
									"    pm.test(\"Response is valid JSON\", () => pm.expect.fail(\"Invalid JSON in response\"));\r",
									"    return;\r",
									"}\r",
									"\r",
									"pm.test(\"Response structure contains 'error' or 'results'\", () => {\r",
									"    pm.expect(jsonResponse).to.have.any.keys(\"error\", \"results\");\r",
									"});\r",
									"\r",
									"if (jsonResponse.error) {\r",
									"    pm.test(\"Error object has message\", () => pm.expect(jsonResponse.error).to.have.property(\"message\"));\r",
									"} else {\r",
									"    console.log(\"⚠️ API ignored invalid limit and returned normal response\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/drug/event.json?api_key={{api_key}}&limit=150",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"drug",
								"event.json"
							],
							"query": [
								{
									"key": "api_key",
									"value": "{{api_key}}"
								},
								{
									"key": "limit",
									"value": "150"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid search syntax",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400 expected, but 200 is tolerated\", () => {\r",
									"    pm.expect([200, 400]).to.include(pm.response.code);\r",
									"});\r",
									"\r",
									"let jsonResponse;\r",
									"try {\r",
									"    jsonResponse = pm.response.json();\r",
									"} catch (e) {\r",
									"    pm.test(\"Response is valid JSON\", () => pm.expect.fail(\"Invalid JSON in response\"));\r",
									"    return;\r",
									"}\r",
									"\r",
									"pm.test(\"Response contains either 'error' or 'results'\", () => {\r",
									"    pm.expect(jsonResponse).to.have.any.keys(\"error\", \"results\");\r",
									"});\r",
									"\r",
									"if (jsonResponse.error) {\r",
									"    pm.test(\"Error object has message\", () => pm.expect(jsonResponse.error).to.have.property(\"message\"));\r",
									"} else {\r",
									"    console.log(\"⚠️ API didn't return error object for invalid search syntax\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/drug/event.json?api_key={{api_key}}&search=patient.reactionmeddrapt==headache",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"drug",
								"event.json"
							],
							"query": [
								{
									"key": "api_key",
									"value": "{{api_key}}"
								},
								{
									"key": "search",
									"value": "patient.reactionmeddrapt==headache"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Checking that the API handles errors correctly and returns meaningful messages when the user submits invalid data"
		},
		{
			"name": "Schema",
			"item": [
				{
					"name": "Validate drug/event response structure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"Response is JSON\", () => pm.response.to.be.json);\r",
									"\r",
									"data = pm.response.json();\r",
									"\r",
									"pm.test(\"Contains meta and results\", () => {\r",
									"    pm.expect(data).to.have.property(\"meta\");\r",
									"    pm.expect(data).to.have.property(\"results\");\r",
									"});\r",
									"\r",
									"const first = data.results[0];\r",
									"pm.test(\"Result has expected high-level fields\", () => {\r",
									"    pm.expect(first).to.have.property(\"safetyreportid\");\r",
									"    pm.expect(first).to.have.property(\"patient\");\r",
									"    pm.expect(first).to.have.property(\"serious\");\r",
									"});\r",
									"\r",
									"pm.test(\"Patient section contains expected subfields\", () => {\r",
									"    const patient = first.patient;\r",
									"    pm.expect(patient).to.have.property(\"reaction\");\r",
									"    pm.expect(patient).to.have.property(\"drug\");\r",
									"});\r",
									"\r",
									"pm.test(\"Each reaction entry has reactionmeddrapt\", () => {\r",
									"    const reactions = first.patient.reaction;\r",
									"    pm.expect(reactions[0]).to.have.property(\"reactionmeddrapt\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/drug/event.json?api_key={{api_key}}&limit=1\n",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"drug",
								"event.json"
							],
							"query": [
								{
									"key": "api_key",
									"value": "{{api_key}}"
								},
								{
									"key": "limit",
									"value": "1\n"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate field data types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check status and response format\r",
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"Response is JSON\", () => pm.response.to.be.json);\r",
									"\r",
									"// Parse response data\r",
									"const responseData = pm.response.json();\r",
									"const results = responseData.results;\r",
									"\r",
									"// Check that results is a non-empty array\r",
									"pm.test(\"Results is a non-empty array\", () => {\r",
									"    pm.expect(results).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"// Iterate over each result and validate fields\r",
									"results.forEach((item, index) => {\r",
									"\r",
									"    pm.test(`Result[${index}] has safetyreportid as non-empty string`, () => {\r",
									"        pm.expect(item).to.have.property(\"safetyreportid\");\r",
									"        pm.expect(item.safetyreportid).to.be.a(\"string\").that.is.not.empty;\r",
									"    });\r",
									"\r",
									"    pm.test(`Result[${index}] has serious flag 0, 1, or 2`, () => {\r",
									"    const seriousNum = Number(item.serious);\r",
									"    pm.expect([0, 1, 2]).to.include(seriousNum);\r",
									"    });\r",
									"\r",
									"    if (item.patient && Array.isArray(item.patient.reaction)) {\r",
									"        item.patient.reaction.forEach((reaction, i) => {\r",
									"            pm.test(`Result[${index}] Reaction[${i}] term is string`, () => {\r",
									"                pm.expect(reaction.reactionmeddrapt).to.be.a(\"string\");\r",
									"            });\r",
									"        });\r",
									"    }\r",
									"\r",
									"    if (item.patient && Array.isArray(item.patient.drug)) {\r",
									"        item.patient.drug.forEach((drug, j) => {\r",
									"            pm.test(`Result[${index}] Drug[${j}] has drugcharacterization and medicinalproduct`, () => {\r",
									"                pm.expect(drug).to.have.property(\"drugcharacterization\");\r",
									"                pm.expect(drug).to.have.property(\"medicinalproduct\");\r",
									"                pm.expect(drug.medicinalproduct).to.be.a(\"string\");\r",
									"            });\r",
									"        });\r",
									"    }\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/drug/event.json?api_key={{api_key}}&limit=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"drug",
								"event.json"
							],
							"query": [
								{
									"key": "api_key",
									"value": "{{api_key}}"
								},
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Performance",
			"item": [
				{
					"name": "Response time within limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"Response is JSON\", () => pm.response.to.be.json);\r",
									"\r",
									"responseTime = pm.response.responseTime;\r",
									"pm.test("Response time < 2000 ms (warning only)", () => {\r",
									"    if (responseTime > 2000) {\r",
									"         console.warn(`⚠️ Response time is high: ${responseTime} ms`);\r",
									"     }\r",
									"});\r",
									"\r",
									"pm.environment.set(\"largeResponseTime\", pm.response.responseTime);\r",
									"\r",
									"console.log(\"Response time:\", responseTime, \"ms\");"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/drug/event.json?api_key={{api_key}}&limit=100",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"drug",
								"event.json"
							],
							"query": [
								{
									"key": "api_key",
									"value": "{{api_key}}"
								},
								{
									"key": "limit",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Compare small vs large response time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"Response is JSON\", () => pm.response.to.be.json);\r",
									"\r",
									"smallResponseTime = pm.response.responseTime;\r",
									"pm.environment.set(\"smallResponseTime\", smallResponseTime);\r",
									"console.log(\"Small request time:\", smallResponseTime, \"ms\");\r",
									"\r",
									"// If previous largeResponseTime exists, compare\r",
									"largeResponseTime = pm.environment.get(\"largeResponseTime\");\r",
									"if (largeResponseTime) {\r",
									"    pm.test(\"Small response faster than large\", () => {\r",
									"        pm.expect(parseInt(smallResponseTime)).to.be.below(parseInt(largeResponseTime));\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/drug/event.json?api_key={{api_key}}&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"drug",
								"event.json"
							],
							"query": [
								{
									"key": "api_key",
									"value": "{{api_key}}"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Load sanity check",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"requestCount\")) {\r",
									"    pm.environment.set(\"requestCount\", 1);\r",
									"} else {\r",
									"    let count = parseInt(pm.environment.get(\"requestCount\")) + 1;\r",
									"    pm.environment.set(\"requestCount\", count);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"\r",
									"count = parseInt(pm.environment.get(\"requestCount\"));\r",
									"console.log(\"Request #\", count, \"Time:\", pm.response.responseTime, \"ms\");\r",
									"\r",
									"pm.test(\"Response is JSON\", () => pm.response.to.be.json);\r",
									"\r",
									"if (count < 5) {\r",
									"    postman.setNextRequest(\"Request 3 — Load sanity check\");\r",
									"} else {\r",
									"    pm.environment.unset(\"requestCount\");\r",
									"    console.log(\"Load sanity check finished\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/drug/event.json?api_key={{api_key}}&limit=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"drug",
								"event.json"
							],
							"query": [
								{
									"key": "api_key",
									"value": "{{api_key}}"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Checking that the API does not die under minimal load"
		},
		{
			"name": "Integration (cross-endpoint scenarios)",
			"item": [
				{
					"name": "Get NDC code and verify in events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"Response is JSON\", () => pm.response.to.be.json);\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"const ndcCode = jsonData.results?.[0]?.product_ndc;\r",
									"\r",
									"pm.environment.set(\"ndcCode\", ndcCode);\r",
									"console.log(\"Saved NDC code:\", ndcCode);\r",
									"\r",
									"pm.test(\"NDC code exists\", () => {\r",
									"    pm.expect(ndcCode).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Request 2 — Verify NDC in drug events\");"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/drug/ndc.json?api_key={{api_key}}&limit=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"drug",
								"ndc.json"
							],
							"query": [
								{
									"key": "api_key",
									"value": "{{api_key}}"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify NDC in drug events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"Response is JSON\", () => pm.response.to.be.json);\r",
									"\r",
									"jsonData = pm.response.json();\r",
									"pm.test(\"Events found for NDC\", () => {\r",
									"    pm.expect(jsonData.results && jsonData.results.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"console.log(\"Events count:\", jsonData.results?.length || 0);"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/drug/event.json?api_key={{api_key}}&search=patient.drug.openfda.product_ndc:{{ndcCode}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"drug",
								"event.json"
							],
							"query": [
								{
									"key": "api_key",
									"value": "{{api_key}}"
								},
								{
									"key": "search",
									"value": "patient.drug.openfda.product_ndc:{{ndcCode}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "It checks that the data from one endpoint /drug/ndc.json actually exists in another /drug/event.json"
		}
	]
}
